import multiprocessing
import pandas
import threading
import pandas as pd
from os import listdir
import requests
import json
import asyncio
import urllib
import csv
import pdb
import dask.dataframe as dd
from dask.distributed import progress
from distributed import Client
import ssl
import datetime



# engine = create_engine('postgresql://admin:admin@localhost:5433/postgres')
# conn = engine.connect()


# client = MongoClient()
# lm = LinearRegression()
# lm.fit(x, y)
# fc = zip(features, lm.coef_)
# list(fc)
# lm.score(x, y)


#from string import rsplit
API_KEY = "17188a6953269ab608ba14c3e3d8fb02"
path = "C:/FREDDATA/somedata"
# client = MongoClient('mongodb://localhost:27017/')
# db = client.FRED_DATABASE

        
def InitialObject():
    a = requests.get("https://api.stlouisfed.org/fred/series/observations?series_id=00XALCCZM086NEST&api_key=17188a6953269ab608ba14c3e3d8fb02&realtime_start=2013-08-14&observation_start=2013-08-14&frequency=m&file_type=json")
    output1 = json.loads(a.text)
    outputa = pd.DataFrame.from_dict(output1['observations'])
    del outputa["realtime_start"]
    del outputa["realtime_end"]
    outputa.head()
    try:
        outputa.rename(columns={'Date':'date','value':"00XALCCZM086NEST"}, inplace = 'True')
        # outputa.head()
        # outputc = dd.from_pandas(outputa, npartitions=10)
        return outputa  
    except Exception as e:
        print(e)


def runa(series):
    data = InitialObject()
    for i in range(0,100):
        data = Indicator(data, series[i])
    data.to_csv("C:/FREDDATA/runa.csv")
    return data
    

def runb(series):
    data = InitialObject()
    for i in range(101,200):
        data = Indicator(data, series[i])
    data.to_csv("C:/FREDDATA/runb.csv")
    return data

#@asyncio.coroutine
def Indicator(dataframe, series):
    try:
        a = requests.get("https://api.stlouisfed.org/fred/series/observations?series_id="+series+"&api_key=17188a6953269ab608ba14c3e3d8fb02&realtime_start=2013-08-14&observation_start=2013-08-14&frequency=m&file_type=json")
        output1 = json.loads(a.text)
        #print(output1)
        try:
            outputa = pd.DataFrame.from_dict(output1['observations'])
            del outputa["realtime_start"]
            del outputa["realtime_end"]
            outputa.rename(columns={'Date':'date','value':series}, inplace = 'True')
            #print(outputa)
            #outputa = dd.from_pandas(outputa, npartitions=10)
            #Had some trouble joing the data sets, ultimately, I had to make the datetime English India using Excel
            outputc = pandas.concat([dataframe, outputa], axis=1)
            #outputc = pd.merge(dataframe, outputa, left_index=True, on = 'date') 
            #dataframe = dataframe.join(outputa)
            return outputc


        except Exception as e:
            print(e)
            return dataframe
    except Exception as e:
        print(e)
        return dataframe
    
        
series_id = pd.read_csv("C:\\Users\\ricci\Desktop\\Projects\\FRED\\Months.csv",encoding = "ISO-8859-1")
series= []
for value in series_id["File"]:
    value = value.split(".csv")[0]
    value = value.rpartition("\\")[-1]
    series.append(value)


# @asyncio.coroutine
def run(start, end):
    outputc = InitialObject()
    for i in range(start,end):
        print(i)
        try:
            a = requests.get("https://api.stlouisfed.org/fred/series/observations?series_id="+str(series[i])+"&api_key=17188a6953269ab608ba14c3e3d8fb02&realtime_start=2013-08-14&observation_start=2013-08-14&frequency=m&file_type=json")
            output1 = json.loads(a.text)
            #print(output1)
            try:
                outputa = pd.DataFrame.from_dict(output1['observations'])
                del outputa["realtime_start"]
                del outputa["realtime_end"]
                outputa.rename(columns={'Date':'date','value':str(series[i])}, inplace = 'True')
                #print(outputa)
                #outputa = dd.from_pandas(outputa, npartitions=10)
                #Had some trouble joing the data sets, ultimately, I had to make the datetime English India using Excel
                outputc = pandas.concat([outputc, outputa], axis=1)
                #outputc = pd.merge(dataframe, outputa, left_index=True, on = 'date') 
                #dataframe = dataframe.join(outputa)

            except Exception as e:
                print(e)
        except Exception as e:
            print(e)
    outputc.to_csv("C:/Projects/finallysomebigdata" + start + ".csv")
    
dask = 0

a = threading.Thread(target=run, args=(dask,dask + 1000,))
a.start()
dask = dask + 1001

a = threading.Thread(target=run, args=(dask,dask + 1000,))
a.start()
dask = dask + 1001


a = threading.Thread(target=run, args=(dask,dask + 1000,))
a.start()
dask = dask + 1001


a = threading.Thread(target=run, args=(dask,dask + 1000,))
a.start()
dask = dask + 1001


a = threading.Thread(target=run, args=(dask,dask + 1000,))
a.start()
dask = dask + 1001


a = threading.Thread(target=run, args=(dask,dask + 1000,))
a.start()
dask = dask + 1001


a = threading.Thread(target=run, args=(dask,dask + 1000,))
a.start()
dask = dask + 1001


a = threading.Thread(target=run, args=(dask,dask + 1000,))
a.start()
dask = dask + 1001


a = threading.Thread(target=run, args=(dask,dask + 1000,))
a.start()
dask = dask + 1001


a = threading.Thread(target=run, args=(dask,dask + 1000,))
a.start()
dask = dask + 1001


# loop = asyncio.get_event_loop()

# loop.run_until_complete(asyncio.gather(
#     run(0, 1000),
#     run(1001, 2000),
#     run(2001, 3000),
#     run(3001, 4000),
#     run(4001, 5000),
#     ))
# loop.close()
